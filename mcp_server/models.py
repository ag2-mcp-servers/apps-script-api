# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:47:09+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class CreateProjectRequest(BaseModel):
    parentId: Optional[str] = Field(
        None,
        description='The Drive ID of a parent file that the created script project is bound to. This is usually the ID of a Google Doc, Google Sheet, Google Form, or Google Slides file. If not set, a standalone script project is created.',
    )
    title: Optional[str] = Field(None, description='The title for the project.')


class DeploymentConfig(BaseModel):
    description: Optional[str] = Field(
        None, description='The description for this deployment.'
    )
    manifestFileName: Optional[str] = Field(
        None, description='The manifest file name for this deployment.'
    )
    scriptId: Optional[str] = Field(None, description="The script project's Drive ID.")
    versionNumber: Optional[int] = Field(
        None, description='The version number on which this deployment is based.'
    )


class Empty(BaseModel):
    pass


class EntryPointType(Enum):
    ENTRY_POINT_TYPE_UNSPECIFIED = 'ENTRY_POINT_TYPE_UNSPECIFIED'
    WEB_APP = 'WEB_APP'
    EXECUTION_API = 'EXECUTION_API'
    ADD_ON = 'ADD_ON'


class ExecutionRequest(BaseModel):
    devMode: Optional[bool] = Field(
        None,
        description='If `true` and the user is an owner of the script, the script runs at the most recently saved version rather than the version deployed for use with the Apps Script API. Optional; default is `false`.',
    )
    function: Optional[str] = Field(
        None,
        description='The name of the function to execute in the given script. The name does not include parentheses or parameters. It can reference a function in an included library such as `Library.libFunction1`.',
    )
    parameters: Optional[List] = Field(
        None,
        description='The parameters to be passed to the function being executed. The object type for each parameter should match the expected type in Apps Script. Parameters cannot be Apps Script-specific object types (such as a `Document` or a `Calendar`); they can only be primitive types such as `string`, `number`, `array`, `object`, or `boolean`. Optional.',
    )
    sessionState: Optional[str] = Field(
        None,
        description='*Deprecated*. For use with Android add-ons only. An ID that represents the user\'s current session in the Android app for Google Docs or Sheets, included as extra data in the [Intent](https://developer.android.com/guide/components/intents-filters.html) that launches the add-on. When an Android add-on is run with a session state, it gains the privileges of a [bound](https://developers.google.com/apps-script/guides/bound) scriptâ€”that is, it can access information like the user\'s current cursor position (in Docs) or selected cell (in Sheets). To retrieve the state, call `Intent.getStringExtra("com.google.android.apps.docs.addons.SessionState")`. Optional.',
    )


class ExecutionResponse(BaseModel):
    result: Optional[Any] = Field(
        None,
        description='The return value of the script function. The type matches the object type returned in Apps Script. Functions called using the Apps Script API cannot return Apps Script-specific objects (such as a `Document` or a `Calendar`); they can only return primitive types such as a `string`, `number`, `array`, `object`, or `boolean`.',
    )


class Type(Enum):
    ENUM_TYPE_UNSPECIFIED = 'ENUM_TYPE_UNSPECIFIED'
    SERVER_JS = 'SERVER_JS'
    HTML = 'HTML'
    JSON = 'JSON'


class AddOnType(Enum):
    UNKNOWN_ADDON_TYPE = 'UNKNOWN_ADDON_TYPE'
    GMAIL = 'GMAIL'
    DATA_STUDIO = 'DATA_STUDIO'


class GoogleAppsScriptTypeAddOnEntryPoint(BaseModel):
    addOnType: Optional[AddOnType] = Field(
        None, description="The add-on's required list of supported container types."
    )
    description: Optional[str] = Field(
        None, description="The add-on's optional description."
    )
    helpUrl: Optional[str] = Field(None, description="The add-on's optional help URL.")
    postInstallTipUrl: Optional[str] = Field(
        None, description="The add-on's required post install tip URL."
    )
    reportIssueUrl: Optional[str] = Field(
        None, description="The add-on's optional report issue URL."
    )
    title: Optional[str] = Field(None, description="The add-on's required title.")


class Access(Enum):
    UNKNOWN_ACCESS = 'UNKNOWN_ACCESS'
    MYSELF = 'MYSELF'
    DOMAIN = 'DOMAIN'
    ANYONE = 'ANYONE'
    ANYONE_ANONYMOUS = 'ANYONE_ANONYMOUS'


class GoogleAppsScriptTypeExecutionApiConfig(BaseModel):
    access: Optional[Access] = Field(
        None, description='Who has permission to run the API executable.'
    )


class GoogleAppsScriptTypeExecutionApiEntryPoint(BaseModel):
    entryPointConfig: Optional[GoogleAppsScriptTypeExecutionApiConfig] = Field(
        None, description="The entry point's configuration."
    )


class GoogleAppsScriptTypeFunction(BaseModel):
    name: Optional[str] = Field(
        None, description='The function name in the script project.'
    )
    parameters: Optional[List[str]] = Field(
        None,
        description='The ordered list of parameter names of the function in the script project.',
    )


class GoogleAppsScriptTypeFunctionSet(BaseModel):
    values: Optional[List[GoogleAppsScriptTypeFunction]] = Field(
        None, description='A list of functions composing the set.'
    )


class ProcessStatus(Enum):
    PROCESS_STATUS_UNSPECIFIED = 'PROCESS_STATUS_UNSPECIFIED'
    RUNNING = 'RUNNING'
    PAUSED = 'PAUSED'
    COMPLETED = 'COMPLETED'
    CANCELED = 'CANCELED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    UNKNOWN = 'UNKNOWN'
    DELAYED = 'DELAYED'


class ProcessType(Enum):
    PROCESS_TYPE_UNSPECIFIED = 'PROCESS_TYPE_UNSPECIFIED'
    ADD_ON = 'ADD_ON'
    EXECUTION_API = 'EXECUTION_API'
    TIME_DRIVEN = 'TIME_DRIVEN'
    TRIGGER = 'TRIGGER'
    WEBAPP = 'WEBAPP'
    EDITOR = 'EDITOR'
    SIMPLE_TRIGGER = 'SIMPLE_TRIGGER'
    MENU = 'MENU'
    BATCH_TASK = 'BATCH_TASK'


class UserAccessLevel(Enum):
    USER_ACCESS_LEVEL_UNSPECIFIED = 'USER_ACCESS_LEVEL_UNSPECIFIED'
    NONE = 'NONE'
    READ = 'READ'
    WRITE = 'WRITE'
    OWNER = 'OWNER'


class GoogleAppsScriptTypeProcess(BaseModel):
    duration: Optional[str] = Field(
        None, description='Duration the execution spent executing.'
    )
    functionName: Optional[str] = Field(
        None, description='Name of the function the started the execution.'
    )
    processStatus: Optional[ProcessStatus] = Field(
        None, description='The executions status.'
    )
    processType: Optional[ProcessType] = Field(None, description='The executions type.')
    projectName: Optional[str] = Field(
        None, description='Name of the script being executed.'
    )
    startTime: Optional[str] = Field(None, description='Time the execution started.')
    userAccessLevel: Optional[UserAccessLevel] = Field(
        None, description='The executing users access level to the script.'
    )


class GoogleAppsScriptTypeUser(BaseModel):
    domain: Optional[str] = Field(None, description="The user's domain.")
    email: Optional[str] = Field(
        None, description="The user's identifying email address."
    )
    name: Optional[str] = Field(None, description="The user's display name.")
    photoUrl: Optional[str] = Field(None, description="The user's photo.")


class ExecuteAs(Enum):
    UNKNOWN_EXECUTE_AS = 'UNKNOWN_EXECUTE_AS'
    USER_ACCESSING = 'USER_ACCESSING'
    USER_DEPLOYING = 'USER_DEPLOYING'


class GoogleAppsScriptTypeWebAppConfig(BaseModel):
    access: Optional[Access] = Field(
        None, description='Who has permission to run the web app.'
    )
    executeAs: Optional[ExecuteAs] = Field(
        None, description='Who to execute the web app as.'
    )


class GoogleAppsScriptTypeWebAppEntryPoint(BaseModel):
    entryPointConfig: Optional[GoogleAppsScriptTypeWebAppConfig] = Field(
        None, description="The entry point's configuration."
    )
    url: Optional[str] = Field(None, description='The URL for the web application.')


class ListScriptProcessesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token for the next page of results. If empty, there are no more pages remaining.',
    )
    processes: Optional[List[GoogleAppsScriptTypeProcess]] = Field(
        None, description='List of processes matching request parameters.'
    )


class ListUserProcessesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token for the next page of results. If empty, there are no more pages remaining.',
    )
    processes: Optional[List[GoogleAppsScriptTypeProcess]] = Field(
        None, description='List of processes matching request parameters.'
    )


class MetricsValue(BaseModel):
    endTime: Optional[str] = Field(
        None, description='Required field indicating the end time of the interval.'
    )
    startTime: Optional[str] = Field(
        None, description='Required field indicating the start time of the interval.'
    )
    value: Optional[str] = Field(
        None, description='Indicates the number of executions counted.'
    )


class Project(BaseModel):
    createTime: Optional[str] = Field(None, description='When the script was created.')
    creator: Optional[GoogleAppsScriptTypeUser] = Field(
        None, description='User who originally created the script.'
    )
    lastModifyUser: Optional[GoogleAppsScriptTypeUser] = Field(
        None, description='User who last modified the script.'
    )
    parentId: Optional[str] = Field(
        None,
        description="The parent's Drive ID that the script will be attached to. This is usually the ID of a Google Document or Google Sheet. This filed is optional, and if not set, a stand-alone script will be created.",
    )
    scriptId: Optional[str] = Field(None, description="The script project's Drive ID.")
    title: Optional[str] = Field(None, description='The title for the project.')
    updateTime: Optional[str] = Field(
        None, description='When the script was last updated.'
    )


class ScriptStackTraceElement(BaseModel):
    function: Optional[str] = Field(
        None, description='The name of the function that failed.'
    )
    lineNumber: Optional[int] = Field(
        None, description='The line number where the script failed.'
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code. For this API, this value either: - 10, indicating a `SCRIPT_TIMEOUT` error, - 3, indicating an `INVALID_ARGUMENT` error, or - 1, indicating a `CANCELLED` execution. ',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='An array that contains a single ExecutionError object that provides information about the nature of the error.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which is in English. Any user-facing error message is localized and sent in the details field, or localized by the client.',
    )


class UpdateDeploymentRequest(BaseModel):
    deploymentConfig: Optional[DeploymentConfig] = Field(
        None, description='The deployment configuration.'
    )


class NullValue(Enum):
    NULL_VALUE = 'NULL_VALUE'


class Version(BaseModel):
    createTime: Optional[str] = Field(None, description='When the version was created.')
    description: Optional[str] = Field(
        None, description='The description for this version.'
    )
    scriptId: Optional[str] = Field(None, description="The script project's Drive ID.")
    versionNumber: Optional[int] = Field(
        None,
        description='The incremental ID that is created by Apps Script when a version is created. This is system assigned number and is immutable once created.',
    )


class UserProcessFilterStatus(Enum):
    PROCESS_STATUS_UNSPECIFIED = 'PROCESS_STATUS_UNSPECIFIED'
    RUNNING = 'RUNNING'
    PAUSED = 'PAUSED'
    COMPLETED = 'COMPLETED'
    CANCELED = 'CANCELED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    UNKNOWN = 'UNKNOWN'
    DELAYED = 'DELAYED'


class UserProcessFilterType(Enum):
    PROCESS_TYPE_UNSPECIFIED = 'PROCESS_TYPE_UNSPECIFIED'
    ADD_ON = 'ADD_ON'
    EXECUTION_API = 'EXECUTION_API'
    TIME_DRIVEN = 'TIME_DRIVEN'
    TRIGGER = 'TRIGGER'
    WEBAPP = 'WEBAPP'
    EDITOR = 'EDITOR'
    SIMPLE_TRIGGER = 'SIMPLE_TRIGGER'
    MENU = 'MENU'
    BATCH_TASK = 'BATCH_TASK'


class UserProcessFilterUserAccessLevel(Enum):
    USER_ACCESS_LEVEL_UNSPECIFIED = 'USER_ACCESS_LEVEL_UNSPECIFIED'
    NONE = 'NONE'
    READ = 'READ'
    WRITE = 'WRITE'
    OWNER = 'OWNER'


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class UserProcessFilterStatuses(RootModel[List[UserProcessFilterStatus]]):
    root: List[UserProcessFilterStatus]


class UserProcessFilterTypes(RootModel[List[UserProcessFilterType]]):
    root: List[UserProcessFilterType]


class UserProcessFilterUserAccessLevels(
    RootModel[List[UserProcessFilterUserAccessLevel]]
):
    root: List[UserProcessFilterUserAccessLevel]


class ScriptProcessFilterStatus(Enum):
    PROCESS_STATUS_UNSPECIFIED = 'PROCESS_STATUS_UNSPECIFIED'
    RUNNING = 'RUNNING'
    PAUSED = 'PAUSED'
    COMPLETED = 'COMPLETED'
    CANCELED = 'CANCELED'
    FAILED = 'FAILED'
    TIMED_OUT = 'TIMED_OUT'
    UNKNOWN = 'UNKNOWN'
    DELAYED = 'DELAYED'


class ScriptProcessFilterType(Enum):
    PROCESS_TYPE_UNSPECIFIED = 'PROCESS_TYPE_UNSPECIFIED'
    ADD_ON = 'ADD_ON'
    EXECUTION_API = 'EXECUTION_API'
    TIME_DRIVEN = 'TIME_DRIVEN'
    TRIGGER = 'TRIGGER'
    WEBAPP = 'WEBAPP'
    EDITOR = 'EDITOR'
    SIMPLE_TRIGGER = 'SIMPLE_TRIGGER'
    MENU = 'MENU'
    BATCH_TASK = 'BATCH_TASK'


class ScriptProcessFilterUserAccessLevel(Enum):
    USER_ACCESS_LEVEL_UNSPECIFIED = 'USER_ACCESS_LEVEL_UNSPECIFIED'
    NONE = 'NONE'
    READ = 'READ'
    WRITE = 'WRITE'
    OWNER = 'OWNER'


class ScriptProcessFilterStatuses(RootModel[List[ScriptProcessFilterStatus]]):
    root: List[ScriptProcessFilterStatus]


class ScriptProcessFilterTypes(RootModel[List[ScriptProcessFilterType]]):
    root: List[ScriptProcessFilterType]


class ScriptProcessFilterUserAccessLevels(
    RootModel[List[ScriptProcessFilterUserAccessLevel]]
):
    root: List[ScriptProcessFilterUserAccessLevel]


class MetricsGranularity(Enum):
    UNSPECIFIED_GRANULARITY = 'UNSPECIFIED_GRANULARITY'
    WEEKLY = 'WEEKLY'
    DAILY = 'DAILY'


class EntryPoint(BaseModel):
    addOn: Optional[GoogleAppsScriptTypeAddOnEntryPoint] = Field(
        None, description='Add-on properties.'
    )
    entryPointType: Optional[EntryPointType] = Field(
        None, description='The type of the entry point.'
    )
    executionApi: Optional[GoogleAppsScriptTypeExecutionApiEntryPoint] = Field(
        None,
        description='An entry point specification for Apps Script API execution calls.',
    )
    webApp: Optional[GoogleAppsScriptTypeWebAppEntryPoint] = Field(
        None, description='An entry point specification for web apps.'
    )


class ExecutionError(BaseModel):
    errorMessage: Optional[str] = Field(
        None,
        description="The error message thrown by Apps Script, usually localized into the user's language.",
    )
    errorType: Optional[str] = Field(
        None,
        description='The error type, for example `TypeError` or `ReferenceError`. If the error type is unavailable, this field is not included.',
    )
    scriptStackTraceElements: Optional[List[ScriptStackTraceElement]] = Field(
        None,
        description='An array of objects that provide a stack trace through the script to show where the execution failed, with the deepest call first.',
    )


class File(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Creation date timestamp. This read-only field is only visible to users who have WRITER permission for the script project.',
    )
    functionSet: Optional[GoogleAppsScriptTypeFunctionSet] = Field(
        None, description='The defined set of functions in the script file, if any.'
    )
    lastModifyUser: Optional[GoogleAppsScriptTypeUser] = Field(
        None,
        description='The user who modified the file most recently. This read-only field is only visible to users who have WRITER permission for the script project.',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the file. The file extension is not part of the file name, which can be identified from the type field.',
    )
    source: Optional[str] = Field(None, description='The file content.')
    type: Optional[Type] = Field(None, description='The type of the file.')
    updateTime: Optional[str] = Field(
        None,
        description='Last modified date timestamp. This read-only field is only visible to users who have WRITER permission for the script project.',
    )


class ListVersionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='The token use to fetch the next page of records. if not exist in the response, that means no more versions to list.',
    )
    versions: Optional[List[Version]] = Field(None, description='The list of versions.')


class Metrics(BaseModel):
    activeUsers: Optional[List[MetricsValue]] = Field(
        None, description='Number of active users.'
    )
    failedExecutions: Optional[List[MetricsValue]] = Field(
        None, description='Number of failed executions.'
    )
    totalExecutions: Optional[List[MetricsValue]] = Field(
        None, description='Number of total executions.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='This field indicates whether the script execution has completed. A completed execution has a populated `response` field containing the ExecutionResponse from function that was executed.',
    )
    error: Optional[Status] = Field(
        None,
        description="If a `run` call succeeds but the script function (or Apps Script itself) throws an exception, this field contains a Status object. The `Status` object's `details` field contains an array with a single ExecutionError object that provides information about the nature of the error.",
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description="If the script function returns successfully, this field contains an ExecutionResponse object with the function's return value.",
    )


class Content(BaseModel):
    files: Optional[List[File]] = Field(
        None,
        description='The list of script project files. One of the files is a script manifest; it must be named "appsscript", must have type of JSON, and include the manifest configurations for the project.',
    )
    scriptId: Optional[str] = Field(None, description="The script project's Drive ID.")


class Deployment(BaseModel):
    deploymentConfig: Optional[DeploymentConfig] = Field(
        None, description='The deployment configuration.'
    )
    deploymentId: Optional[str] = Field(
        None, description='The deployment ID for this deployment.'
    )
    entryPoints: Optional[List[EntryPoint]] = Field(
        None, description="The deployment's entry points."
    )
    updateTime: Optional[str] = Field(
        None, description='Last modified date time stamp.'
    )


class ListDeploymentsResponse(BaseModel):
    deployments: Optional[List[Deployment]] = Field(
        None, description='The list of deployments.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The token that can be used in the next call to get the next page of results.',
    )


class ExecuteStreamResponse(BaseModel):
    result: Optional[ScriptExecutionResult] = Field(
        None, description='The result of the execution.'
    )


class ListValue(BaseModel):
    values: Optional[List[Value]] = Field(
        None, description='Repeated field of dynamically typed values.'
    )


class ScriptExecutionResult(BaseModel):
    returnValue: Optional[Value] = Field(
        None, description='The returned value of the execution.'
    )


class Struct(BaseModel):
    fields: Optional[Dict[str, Value]] = Field(
        None, description='Unordered map of dynamically typed values.'
    )


class Value(BaseModel):
    boolValue: Optional[bool] = Field(None, description='Represents a boolean value.')
    bytesValue: Optional[str] = Field(None, description='Represents raw byte values.')
    dateValue: Optional[str] = Field(
        None, description='Represents a date in ms since the epoch.'
    )
    listValue: Optional[ListValue] = Field(
        None, description='Represents a repeated `Value`.'
    )
    nullValue: Optional[NullValue] = Field(None, description='Represents a null value.')
    numberValue: Optional[float] = Field(None, description='Represents a double value.')
    protoValue: Optional[Dict[str, Any]] = Field(
        None, description='Represents a structured proto value.'
    )
    stringValue: Optional[str] = Field(None, description='Represents a string value.')
    structValue: Optional[Struct] = Field(
        None, description='Represents a structured value.'
    )


ExecuteStreamResponse.model_rebuild()
ListValue.model_rebuild()
ScriptExecutionResult.model_rebuild()
Struct.model_rebuild()
